#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.23a
#  in conjunction with Tcl version 8.6
#    Jun 06, 2019 11:46:24 AM IST  platform: Windows NT

import sys
import cv2
from face_functions import *
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def Add_face(event):
    #print('pk')
    
    #print(face.top.getvalue(),face.top.Entry2)
    capture =cv2.VideoCapture(0)
    face_detect = cv2.CascadeClassifier('xml/frontal_face.xml')
    while True:
        ret,frame=capture.read()
        gray = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
        faces = face_detect.detectMultiScale(gray,1.3)
        #gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        for (x,y,w,h) in faces:
            cv2.rectangle(frame,(x,y),(x+w,y+h),(0,0,255),2)
        
        cv2.imshow('frame',frame)
        if cv2.waitKey(1) ==ord('q'):
             break
    capture.release()
    cv2.destroyAllWindows()

def Add_face1(event):
    cam = cv2.VideoCapture(0)
    #cv2.namedWindow("Face", cv2.WINDOW_AUTOSIZE)
    #name=w.Entry2.get()
    folder = "user/"+user.lower()


    if not os.path.exists(folder):
        os.mkdir(folder)
    
        flag_start_capturing = False
        sample=1
   
        cv2.namedWindow("Face", cv2.WINDOW_NORMAL)

        while True:
            ret,frame = cam.read()
            gray = gray_scale(frame)
            faces_coord = detect_face(gray)

            if len(faces_coord):
                faces = normalize_faces(gray,faces_coord)
                  
                cv2.imwrite(folder + '/' + str(sample)+'.jpg',faces[0])
                #plot_show(faces[0],"Image saved:"+str(sample))
                #clear_output(wait=True)
                if flag_start_capturing == True:
                    sample += 1
            
            draw_rectangle(frame,faces_coord)
            cv2.imshow('Face',frame)
            keypress=cv2.waitKey(1)
            
            if keypress == ord('c'):
                
                if flag_start_capturing == False:
                    flag_start_capturing = True
            
        
            if sample >5:
                break
                
            if keypress == ord('q'):
                break

        cam.release()
        cv2.destroyAllWindows()
    else:
        print ("This name already exists.")

def init(top, gui,*args, **kwargs):
    global w, top_level, root,user
    w = gui
    top_level = top
    root = top
    

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import face
    face.vp_start_gui()




